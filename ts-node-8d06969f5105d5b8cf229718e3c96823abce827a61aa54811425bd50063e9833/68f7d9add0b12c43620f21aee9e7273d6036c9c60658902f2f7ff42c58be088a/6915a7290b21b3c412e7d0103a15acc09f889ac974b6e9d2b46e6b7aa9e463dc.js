"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var fs = require("fs");
var https = require("https");
var read_all_lessons_route_1 = require("./read-all-lessons.route");
var create_user_route_1 = require("./create-user.route");
var get_user_route_1 = require("./get-user.route");
var logout_route_1 = require("./logout.route");
var login_route_1 = require("./login.route");
var get_user_middleware_1 = require("./get-user.middleware");
var bodyParser = require('body-parser');
var cookieParser = require('cookie-parser');
var app = express();
app.use(cookieParser());
app.use(get_user_middleware_1.retrieveUserIdFromRequest);
app.use(bodyParser.json());
var commandLineArgs = require('command-line-args');
var optionDefinitions = [
    { name: 'secure', type: Boolean, defaultOption: true },
];
var options = commandLineArgs(optionDefinitions);
// REST API
app.route('/api/lessons')
    .get(read_all_lessons_route_1.readAllLessons);
app.route('/api/signup')
    .post(create_user_route_1.createUser);
app.route('/api/user')
    .get(get_user_route_1.getUser);
app.route('/api/logout')
    .post(logout_route_1.logout);
app.route('/api/login')
    .post(login_route_1.login);
if (options.secure) {
    var httpsServer_1 = https.createServer({
        key: fs.readFileSync('key.pem'),
        cert: fs.readFileSync('cert.pem')
    }, app);
    // launch an HTTPS Server. Note: this does NOT mean that the application is secure
    httpsServer_1.listen(9000, function () { return console.log("HTTPS Secure Server running at https://localhost:" + httpsServer_1.address().port); });
}
else {
    // launch an HTTP Server
    var httpServer_1 = app.listen(9000, function () {
        console.log("HTTP Server running at https://localhost:" + httpServer_1.address().port);
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUveW92Y2hlbmtvL1Byb2plY3RzL2FuZ3VsYXItc2VjdXJpdHktY291cnNlL3NlcnZlci9zZXJ2ZXIudHMiLCJzb3VyY2VzIjpbIi9ob21lL3lvdmNoZW5rby9Qcm9qZWN0cy9hbmd1bGFyLXNlY3VyaXR5LWNvdXJzZS9zZXJ2ZXIvc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsaUNBQW1DO0FBRW5DLHVCQUF5QjtBQUN6Qiw2QkFBK0I7QUFDL0IsbUVBQXdEO0FBQ3hELHlEQUErQztBQUMvQyxtREFBeUM7QUFDekMsK0NBQXNDO0FBQ3RDLDZDQUFvQztBQUNwQyw2REFBa0U7QUFDbEUsSUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzFDLElBQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUc5QyxJQUFNLEdBQUcsR0FBZ0IsT0FBTyxFQUFFLENBQUM7QUFFbkMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLEdBQUcsQ0FBQyxHQUFHLENBQUMsK0NBQXlCLENBQUMsQ0FBQztBQUNuQyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBRzNCLElBQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBRXJELElBQU0saUJBQWlCLEdBQUc7SUFDdEIsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUcsYUFBYSxFQUFFLElBQUksRUFBRTtDQUMxRCxDQUFDO0FBRUYsSUFBTSxPQUFPLEdBQUcsZUFBZSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFHbkQsV0FBVztBQUNYLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDO0tBQ3BCLEdBQUcsQ0FBQyx1Q0FBYyxDQUFDLENBQUM7QUFFekIsR0FBRyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUM7S0FDbkIsSUFBSSxDQUFDLDhCQUFVLENBQUMsQ0FBQztBQUV0QixHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQztLQUNqQixHQUFHLENBQUMsd0JBQU8sQ0FBQyxDQUFDO0FBRWxCLEdBQUcsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDO0tBQ25CLElBQUksQ0FBRSxxQkFBTSxDQUFDLENBQUM7QUFFbkIsR0FBRyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUM7S0FDbEIsSUFBSSxDQUFDLG1CQUFLLENBQUMsQ0FBQztBQUdqQixJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7SUFFaEIsSUFBTSxhQUFXLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztRQUNuQyxHQUFHLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUM7UUFDL0IsSUFBSSxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO0tBQ3BDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFUixrRkFBa0Y7SUFDbEYsYUFBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsY0FBTSxPQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsbURBQW1ELEdBQUcsYUFBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUE3RixDQUE2RixDQUFDLENBQUM7Q0FFakk7S0FDSTtJQUVELHdCQUF3QjtJQUN4QixJQUFNLFlBQVUsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtRQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLDJDQUEyQyxHQUFHLFlBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6RixDQUFDLENBQUMsQ0FBQztDQUVOIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbmltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQge0FwcGxpY2F0aW9ufSBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgaHR0cHMgZnJvbSAnaHR0cHMnO1xuaW1wb3J0IHtyZWFkQWxsTGVzc29uc30gZnJvbSBcIi4vcmVhZC1hbGwtbGVzc29ucy5yb3V0ZVwiO1xuaW1wb3J0IHtjcmVhdGVVc2VyfSBmcm9tIFwiLi9jcmVhdGUtdXNlci5yb3V0ZVwiO1xuaW1wb3J0IHtnZXRVc2VyfSBmcm9tIFwiLi9nZXQtdXNlci5yb3V0ZVwiO1xuaW1wb3J0IHtsb2dvdXR9IGZyb20gXCIuL2xvZ291dC5yb3V0ZVwiO1xuaW1wb3J0IHtsb2dpbn0gZnJvbSBcIi4vbG9naW4ucm91dGVcIjtcbmltcG9ydCB7IHJldHJpZXZlVXNlcklkRnJvbVJlcXVlc3QgfSBmcm9tICcuL2dldC11c2VyLm1pZGRsZXdhcmUnO1xuY29uc3QgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XG5jb25zdCBjb29raWVQYXJzZXIgPSByZXF1aXJlKCdjb29raWUtcGFyc2VyJyk7XG5cblxuY29uc3QgYXBwOiBBcHBsaWNhdGlvbiA9IGV4cHJlc3MoKTtcblxuYXBwLnVzZShjb29raWVQYXJzZXIoKSk7XG5hcHAudXNlKHJldHJpZXZlVXNlcklkRnJvbVJlcXVlc3QpO1xuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG5cblxuY29uc3QgY29tbWFuZExpbmVBcmdzID0gcmVxdWlyZSgnY29tbWFuZC1saW5lLWFyZ3MnKTtcblxuY29uc3Qgb3B0aW9uRGVmaW5pdGlvbnMgPSBbXG4gICAgeyBuYW1lOiAnc2VjdXJlJywgdHlwZTogQm9vbGVhbiwgIGRlZmF1bHRPcHRpb246IHRydWUgfSxcbl07XG5cbmNvbnN0IG9wdGlvbnMgPSBjb21tYW5kTGluZUFyZ3Mob3B0aW9uRGVmaW5pdGlvbnMpO1xuXG5cbi8vIFJFU1QgQVBJXG5hcHAucm91dGUoJy9hcGkvbGVzc29ucycpXG4gICAgLmdldChyZWFkQWxsTGVzc29ucyk7XG5cbmFwcC5yb3V0ZSgnL2FwaS9zaWdudXAnKVxuICAgIC5wb3N0KGNyZWF0ZVVzZXIpO1xuXG5hcHAucm91dGUoJy9hcGkvdXNlcicpXG4gICAgLmdldChnZXRVc2VyKTtcblxuYXBwLnJvdXRlKCcvYXBpL2xvZ291dCcpXG4gICAgLnBvc3QoIGxvZ291dCk7XG5cbmFwcC5yb3V0ZSgnL2FwaS9sb2dpbicpXG4gICAgLnBvc3QobG9naW4pO1xuXG5cbmlmIChvcHRpb25zLnNlY3VyZSkge1xuXG4gICAgY29uc3QgaHR0cHNTZXJ2ZXIgPSBodHRwcy5jcmVhdGVTZXJ2ZXIoe1xuICAgICAgICBrZXk6IGZzLnJlYWRGaWxlU3luYygna2V5LnBlbScpLFxuICAgICAgICBjZXJ0OiBmcy5yZWFkRmlsZVN5bmMoJ2NlcnQucGVtJylcbiAgICB9LCBhcHApO1xuXG4gICAgLy8gbGF1bmNoIGFuIEhUVFBTIFNlcnZlci4gTm90ZTogdGhpcyBkb2VzIE5PVCBtZWFuIHRoYXQgdGhlIGFwcGxpY2F0aW9uIGlzIHNlY3VyZVxuICAgIGh0dHBzU2VydmVyLmxpc3Rlbig5MDAwLCAoKSA9PiBjb25zb2xlLmxvZyhcIkhUVFBTIFNlY3VyZSBTZXJ2ZXIgcnVubmluZyBhdCBodHRwczovL2xvY2FsaG9zdDpcIiArIGh0dHBzU2VydmVyLmFkZHJlc3MoKS5wb3J0KSk7XG5cbn1cbmVsc2Uge1xuXG4gICAgLy8gbGF1bmNoIGFuIEhUVFAgU2VydmVyXG4gICAgY29uc3QgaHR0cFNlcnZlciA9IGFwcC5saXN0ZW4oOTAwMCwgKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkhUVFAgU2VydmVyIHJ1bm5pbmcgYXQgaHR0cHM6Ly9sb2NhbGhvc3Q6XCIgKyBodHRwU2VydmVyLmFkZHJlc3MoKS5wb3J0KTtcbiAgICB9KTtcblxufVxuXG5cblxuXG5cblxuXG5cbiJdfQ==