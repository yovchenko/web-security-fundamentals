"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var database_data_1 = require("./database-data");
var InMemoryDatabase = /** @class */ (function () {
    function InMemoryDatabase() {
        this.userCounter = 0;
    }
    InMemoryDatabase.prototype.readAllLessons = function () {
        return _.values(database_data_1.LESSONS);
    };
    InMemoryDatabase.prototype.createUser = function (email, authenticationId) {
        var usersPerEmail = _.keyBy(_.values(database_data_1.USERS), "email");
        if (usersPerEmail[email]) {
            var message = "An user already exists with email " + email;
            console.error(message);
            throw new Error(message);
        }
        this.userCounter++;
        var id = this.userCounter;
        var user = {
            id: id,
            email: email,
            authenticationId: authenticationId
        };
        database_data_1.USERS[id] = user;
        console.log(database_data_1.USERS);
        return user;
    };
    InMemoryDatabase.prototype.findUserByEmail = function (email) {
        var users = _.values(database_data_1.USERS);
        return _.find(users, function (user) { return user.email === email; });
    };
    InMemoryDatabase.prototype.findUserById = function (userId) {
        var user = undefined;
        if (userId) {
            console.log("looking for userId ", userId);
            var users = _.values(database_data_1.USERS);
            user = _.find(users, function (user) { return user.id.toString() === userId; });
            console.log("user data found:", user);
        }
        return user;
    };
    InMemoryDatabase.prototype.findUserByAuthenticationId = function (authenticationId) {
        var user = undefined;
        if (authenticationId) {
            console.log("looking for user with authenticationId = ", authenticationId);
            var users = _.values(database_data_1.USERS);
            user = _.find(users, function (user) { return user.authenticationId === authenticationId; });
            console.log("user data found:", user);
        }
        return user;
    };
    return InMemoryDatabase;
}());
exports.db = new InMemoryDatabase();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUveW92Y2hlbmtvL1Byb2plY3RzL2FuZ3VsYXItc2VjdXJpdHktY291cnNlL3NlcnZlci9kYXRhYmFzZS50cyIsInNvdXJjZXMiOlsiL2hvbWUveW92Y2hlbmtvL1Byb2plY3RzL2FuZ3VsYXItc2VjdXJpdHktY291cnNlL3NlcnZlci9kYXRhYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDBCQUE0QjtBQUM1QixpREFBK0M7QUFJL0M7SUFBQTtRQUVJLGdCQUFXLEdBQUcsQ0FBQyxDQUFDO0lBOEVwQixDQUFDO0lBNUVHLHlDQUFjLEdBQWQ7UUFDSSxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsdUJBQU8sQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxxQ0FBVSxHQUFWLFVBQVcsS0FBWSxFQUFFLGdCQUFnQjtRQUVyQyxJQUFNLGFBQWEsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMscUJBQUssQ0FBQyxFQUFFLE9BQU8sQ0FBRSxDQUFDO1FBRTFELElBQUksYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3RCLElBQU0sT0FBTyxHQUFHLG9DQUFvQyxHQUFHLEtBQUssQ0FBQztZQUM3RCxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDNUI7UUFFRCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFbkIsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUU1QixJQUFNLElBQUksR0FBVztZQUNqQixFQUFFLElBQUE7WUFDRixLQUFLLE9BQUE7WUFDTCxnQkFBZ0Isa0JBQUE7U0FDbkIsQ0FBQztRQUVGLHFCQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRWpCLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQUssQ0FBQyxDQUFDO1FBRW5CLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFHRCwwQ0FBZSxHQUFmLFVBQWdCLEtBQVk7UUFFeEIsSUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxxQkFBSyxDQUFDLENBQUM7UUFFOUIsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxFQUFwQixDQUFvQixDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVELHVDQUFZLEdBQVosVUFBYSxNQUFhO1FBRXRCLElBQUksSUFBSSxHQUFHLFNBQVMsQ0FBQztRQUVyQixJQUFJLE1BQU0sRUFBRTtZQUVSLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFM0MsSUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxxQkFBSyxDQUFDLENBQUM7WUFFOUIsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxNQUFNLEVBQTdCLENBQTZCLENBQUMsQ0FBQztZQUU1RCxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3pDO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFFaEIsQ0FBQztJQUdELHFEQUEwQixHQUExQixVQUEyQixnQkFBdUI7UUFDOUMsSUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDO1FBRXJCLElBQUksZ0JBQWdCLEVBQUU7WUFFbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQ0FBMkMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBRTNFLElBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMscUJBQUssQ0FBQyxDQUFDO1lBRTlCLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxnQkFBZ0IsRUFBMUMsQ0FBMEMsQ0FBQyxDQUFDO1lBRXpFLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDekM7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUwsdUJBQUM7QUFBRCxDQUFDLEFBaEZELElBZ0ZDO0FBS1ksUUFBQSxFQUFFLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQge0xFU1NPTlMsIFVTRVJTfSBmcm9tIFwiLi9kYXRhYmFzZS1kYXRhXCI7XG5pbXBvcnQge0RiVXNlcn0gZnJvbSBcIi4vZGItdXNlclwiO1xuXG5cbmNsYXNzIEluTWVtb3J5RGF0YWJhc2Uge1xuXG4gICAgdXNlckNvdW50ZXIgPSAwO1xuXG4gICAgcmVhZEFsbExlc3NvbnMoKSB7XG4gICAgICAgIHJldHVybiBfLnZhbHVlcyhMRVNTT05TKTtcbiAgICB9XG5cbiAgICBjcmVhdGVVc2VyKGVtYWlsOnN0cmluZywgYXV0aGVudGljYXRpb25JZCkge1xuXG4gICAgICAgIGNvbnN0IHVzZXJzUGVyRW1haWwgPSBfLmtleUJ5KCBfLnZhbHVlcyhVU0VSUyksIFwiZW1haWxcIiApO1xuXG4gICAgICAgIGlmICh1c2Vyc1BlckVtYWlsW2VtYWlsXSkge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IFwiQW4gdXNlciBhbHJlYWR5IGV4aXN0cyB3aXRoIGVtYWlsIFwiICsgZW1haWw7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51c2VyQ291bnRlcisrO1xuXG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy51c2VyQ291bnRlcjtcblxuICAgICAgICBjb25zdCB1c2VyOiBEYlVzZXIgPSB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIGVtYWlsLFxuICAgICAgICAgICAgYXV0aGVudGljYXRpb25JZFxuICAgICAgICB9O1xuXG4gICAgICAgIFVTRVJTW2lkXSA9IHVzZXI7XG5cbiAgICAgICAgY29uc29sZS5sb2coVVNFUlMpO1xuXG4gICAgICAgIHJldHVybiB1c2VyO1xuICAgIH1cblxuXG4gICAgZmluZFVzZXJCeUVtYWlsKGVtYWlsOnN0cmluZykgOkRiVXNlciB7XG5cbiAgICAgICAgY29uc3QgdXNlcnMgPSBfLnZhbHVlcyhVU0VSUyk7XG5cbiAgICAgICAgcmV0dXJuIF8uZmluZCh1c2VycywgdXNlciA9PiB1c2VyLmVtYWlsID09PSBlbWFpbCk7XG4gICAgfVxuXG4gICAgZmluZFVzZXJCeUlkKHVzZXJJZDpzdHJpbmcpIDpEYlVzZXIge1xuXG4gICAgICAgIGxldCB1c2VyID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICh1c2VySWQpIHtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJsb29raW5nIGZvciB1c2VySWQgXCIsIHVzZXJJZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHVzZXJzID0gXy52YWx1ZXMoVVNFUlMpO1xuXG4gICAgICAgICAgICB1c2VyID0gXy5maW5kKHVzZXJzLCB1c2VyID0+IHVzZXIuaWQudG9TdHJpbmcoKSA9PT0gdXNlcklkKTtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ1c2VyIGRhdGEgZm91bmQ6XCIsIHVzZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVzZXI7XG5cbiAgICB9XG5cblxuICAgIGZpbmRVc2VyQnlBdXRoZW50aWNhdGlvbklkKGF1dGhlbnRpY2F0aW9uSWQ6c3RyaW5nKSB7XG4gICAgICAgIGxldCB1c2VyID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChhdXRoZW50aWNhdGlvbklkKSB7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibG9va2luZyBmb3IgdXNlciB3aXRoIGF1dGhlbnRpY2F0aW9uSWQgPSBcIiwgYXV0aGVudGljYXRpb25JZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHVzZXJzID0gXy52YWx1ZXMoVVNFUlMpO1xuXG4gICAgICAgICAgICB1c2VyID0gXy5maW5kKHVzZXJzLCB1c2VyID0+IHVzZXIuYXV0aGVudGljYXRpb25JZCA9PT0gYXV0aGVudGljYXRpb25JZCk7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidXNlciBkYXRhIGZvdW5kOlwiLCB1c2VyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1c2VyO1xuICAgIH1cblxufVxuXG5cblxuXG5leHBvcnQgY29uc3QgZGIgPSBuZXcgSW5NZW1vcnlEYXRhYmFzZSgpO1xuXG5cbiJdfQ==